# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Disable Oh My Zsh theme (we'll use Oh My Posh instead)
ZSH_THEME=""

# Enable plugins
plugins=(
  git
  z
  zsh-autosuggestions
  zsh-syntax-highlighting
  fzf
)

# Source Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Configure Oh My Posh with catppuccin_macchiato theme (similar to PowerShell config)
eval "$(oh-my-posh init zsh --config $(brew --prefix oh-my-posh)/themes/catppuccin_macchiato.omp.json)"

# Enable automated upgrades for Oh My Posh (similar to PowerShell config)
export POSH_SETTINGS='{
  "auto_upgrade": true
}'

# Configuration de l'historique
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt EXTENDED_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_REDUCE_BLANKS

# Activer la complétion
autoload -Uz compinit && compinit

# Configuration de la complétion pour qu'elle ressemble à MenuComplete de PowerShell
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:messages' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}-- Pas de correspondance --%f'
zstyle ':completion:*:corrections' format '%F{yellow}-- %d (erreurs: %e) --%f'
zstyle ':completion:*' verbose yes
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Raccourcis clavier (équivalents à ceux de PowerShell)
bindkey '^d' delete-char
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward
bindkey '^I' menu-complete  # Tab pour la complétion de menu, comme dans PowerShell

# Configuration de fzf (équivalent à PSFzf)
if command -v fzf &> /dev/null; then
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border"
    
    # Charger l'intégration fzf
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    
    # Configurer Ctrl+R pour rechercher dans l'historique avec fzf (comme dans PowerShell)
    bindkey '^r' fzf-history-widget
    
    # Configurer Ctrl+F pour rechercher des fichiers avec fzf (comme dans PowerShell)
    bindkey '^f' fzf-file-widget
fi

# Configuration de lsd (équivalent à Terminal-Icons)
if command -v lsd &> /dev/null; then
    # Remplacer ls par lsd pour avoir des icônes
    alias ls='lsd'
    alias l='lsd -l'
    alias la='lsd -la'
    alias lt='lsd --tree'
    alias ll='lsd -la'
    alias lsd='lsd -la'
else
    # Fallback si lsd n'est pas installé
    alias ll='ls -la'
    alias la='ls -la'
    alias l='ls -l'
fi

# Définir des alias (équivalents à ceux de PowerShell)
alias vim='nvim'
alias g='git'
alias grep='grep --color=auto'
alias touch='touch'
alias open='open'
alias du='du -h'
alias top='top'
alias oe='open .'

# Fonction pour créer un répertoire et y accéder (équivalent à mkcd)
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Fonction pour obtenir l'adresse IP publique (équivalent à Get-PubIP)
get_pub_ip() {
    curl -s http://ifconfig.me/ip
}

# Fonction pour mettre à jour les paquets (équivalent à Update)
update() {
    if command -v brew &> /dev/null; then
        echo "Mise à jour de Homebrew..."
        brew update && brew upgrade
    fi
}
alias u='update'

# Fonction pour recharger le profil zsh (équivalent à Update-Profile)
reload() {
    source ~/.zshrc
}

# Fonction pour trouver des fichiers par nom (équivalent à Find-File)
ff() {
    find . -name "*$1*" -type f
}

# Fonction pour créer une sauvegarde d'un fichier (équivalent à Backup-File)
bak() {
    cp "$1" "$1.bak"
}

# Fonction pour créer un nouveau fichier (équivalent à New-File)
nf() {
    touch "$1"
}

# Fonction pour rechercher dans l'historique (équivalent à Search-History)
sh() {
    history | grep "$1"
}

# Activer les prédictions basées sur l'historique (comme PredictionSource = 'History' dans PowerShell)
if [[ -f ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    # Configurer les suggestions pour qu'elles ressemblent à PSReadLine
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#2F7004"  # Même couleur que dans PowerShell
    ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
    ZSH_AUTOSUGGEST_USE_ASYNC=1
    ZSH_AUTOSUGGEST_MANUAL_REBIND=1
fi

# Exporter les variables d'environnement nécessaires
export EDITOR='nvim'
export VISUAL='nvim'
export PAGER='less'
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Conserver les configurations existantes
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Load Angular CLI autocompletion.
if command -v ng &> /dev/null; then
    source <(ng completion script)
fi

# Added by Windsurf
export PATH="/Users/lowiq/.codeium/windsurf/bin:$PATH"
