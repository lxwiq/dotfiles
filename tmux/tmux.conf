# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
# ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó
#    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
#
# Ultimate Tmux Configuration with Catppuccin Macchiato Theme
# Optimized for visual appeal, performance and productivity

# =====================================
# ===           General            ===
# =====================================

# Set terminal to support 256 colors and true color
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc,alacritty:RGB,xterm-256color:RGB"

# Enable undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Enable colored undercurl
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Change prefix key to Ctrl+a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Start window and pane numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Automatically renumber windows when one is closed
set -g renumber-windows on

# Increase scrollback buffer size
set -g history-limit 100000

# Enable mouse support
set -g mouse on

# Set escape time to 0ms for faster command sequences and neovim
set -sg escape-time 0

# Focus events enabled for terminals that support them
set -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Set window notifications
setw -g monitor-activity on
set -g visual-activity off

# Reload tmux config with prefix + r
bind r source-file ~/.config/tmux/tmux.conf \; display "‚ú® Config reloaded! ‚ú®"

# Clear screen with Ctrl+L (direct binding, no prefix needed)
bind -n C-l send-keys C-l

# Set longer display time for messages
set -g display-time 2000

# =====================================
# ===           Windows            ===
# =====================================

# Create new window with current path
bind c new-window -c "#{pane_current_path}"

# Split panes using v and h with current path
bind v split-window -h -c "#{pane_current_path}"  # vertical split (left/right)
bind h split-window -v -c "#{pane_current_path}"  # horizontal split (top/bottom)
unbind '"'
unbind %

# Quick window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Window navigation
bind -n M-1 select-window -t 1  # Alt+1 to select window 1
bind -n M-2 select-window -t 2  # Alt+2 to select window 2
bind -n M-3 select-window -t 3  # Alt+3 to select window 3
bind -n M-4 select-window -t 4  # Alt+4 to select window 4
bind -n M-5 select-window -t 5  # Alt+5 to select window 5
bind -n M-6 select-window -t 6  # Alt+6 to select window 6
bind -n M-7 select-window -t 7  # Alt+7 to select window 7
bind -n M-8 select-window -t 8  # Alt+8 to select window 8
bind -n M-9 select-window -t 9  # Alt+9 to select window 9

# Reorder windows
bind-key -n M-< swap-window -t -1
bind-key -n M-> swap-window -t +1

# Rename window
bind-key , command-prompt -p "Rename window to:" "rename-window '%%'"

# Kill window
bind-key X confirm-before -p "Kill window #W? (y/n)" kill-window

# =====================================
# ===            Panes             ===
# =====================================

# Simple pane navigation without Vim integration
bind -n 'C-h' select-pane -L
bind -n 'C-j' select-pane -D
bind -n 'C-k' select-pane -U
bind -n 'M-l' select-pane -R  # Using M-l instead of C-l to avoid conflict with clear screen

# Resize panes with Prefix + arrow keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Fine adjustment with Alt+Shift+arrow keys
bind -n M-S-Left resize-pane -L 2
bind -n M-S-Down resize-pane -D 2
bind -n M-S-Up resize-pane -U 2
bind -n M-S-Right resize-pane -R 2

# Toggle synchronized panes
bind C-x setw synchronize-panes \; display "üîÑ Sync #{?synchronize-panes,ON,OFF}"

# Swap panes
bind > swap-pane -D
bind < swap-pane -U

# Break pane into new window
bind-key b break-pane -d

# Join marked pane to current window
bind-key B join-pane

# Toggle pane zoom (maximize/restore pane)
bind-key z resize-pane -Z

# Toggle pane layout
bind-key Space next-layout

# Mark and swap panes
bind-key m select-pane -m  # Mark pane
bind-key M select-pane -M  # Unmark pane

# Kill pane
bind-key x confirm-before -p "Kill pane #P? (y/n)" kill-pane

# =====================================
# ===           Sessions           ===
# =====================================

# Easy session switching with Prefix + j/k
bind -r j switch-client -n
bind -r k switch-client -p

# Session management
bind C-s new-session
bind C-f command-prompt -p find-session 'switch-client -t %%'
bind S command-prompt -p "New Session Name:" "new-session -s '%%'"
bind K confirm-before -p "Kill session #S? (y/n)" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"

# Session navigation with Alt+[ and Alt+]
bind -n M-[ switch-client -p
bind -n M-] switch-client -n

# Detach from session
bind D detach-client

# Choose session from tree
bind C-t choose-tree -Zs

# Create a new session from current directory
bind C-S-s run-shell 'tmux new-session -d -c "#{pane_current_path}" -s "$(basename "#{pane_current_path}")" && tmux switch-client -t "$(basename "#{pane_current_path}")"'

# =====================================
# ===            Modes             ===
# =====================================

# Enable vi mode
setw -g mode-keys vi

# Enter copy mode with Prefix+[ or Escape
bind [ copy-mode
bind -n Escape copy-mode

# Copy mode using 'v' and 'y' like in vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel

# Search forward/backward in copy mode
bind-key -T copy-mode-vi / command-prompt -i -p "Search Down:" "send -X search-forward-incremental '%%%'"
bind-key -T copy-mode-vi ? command-prompt -i -p "Search Up:" "send -X search-backward-incremental '%%%'"

# Page up/down in copy mode
bind-key -T copy-mode-vi C-u send -X page-up
bind-key -T copy-mode-vi C-d send -X page-down

# Use system clipboard based on OS
if-shell "uname | grep -q Darwin" {
    # macOS clipboard integration
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
} {
    # Linux/WSL clipboard integration (requires xclip or wl-copy)
    if-shell "command -v xclip > /dev/null" {
        bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
        bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
        bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
    }
    if-shell "command -v wl-copy > /dev/null" {
        bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy"
        bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "wl-copy"
        bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "wl-copy"
    }
    # WSL clipboard integration
    if-shell "grep -q Microsoft /proc/version 2>/dev/null" {
        bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "clip.exe"
        bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "clip.exe"
        bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "clip.exe"
    }
}

# =====================================
# ===     Custom Status Bar        ===
# =====================================

# Status bar design with powerline segments and icons
set -g status-position top
set -g status-justify left
set -g status-style "bg=#24273a,fg=#cad3f5"
set -g status-left-length 150
set -g status-right-length 150
set -g status-interval 1  # Update status bar every second

# Define colors
COLOR_BG="#24273a"       # Background
COLOR_FG="#cad3f5"       # Foreground
COLOR_BLUE="#8aadf4"     # Blue
COLOR_GREEN="#a6da95"    # Green
COLOR_YELLOW="#eed49f"   # Yellow
COLOR_RED="#ed8796"      # Red
COLOR_PURPLE="#c6a0f6"   # Purple
COLOR_CYAN="#8bd5ca"     # Cyan
COLOR_GRAY="#363a4f"     # Gray
COLOR_ORANGE="#f5a97f"   # Orange

# Status left with session name, window count and prefix indicator
set -g status-left "#[fg=$COLOR_BG,bg=$COLOR_BLUE,bold] #S #[fg=$COLOR_BLUE,bg=$COLOR_GRAY]#[fg=$COLOR_FG,bg=$COLOR_GRAY] #(tmux list-windows | wc -l | xargs) windows #[fg=$COLOR_GRAY,bg=$COLOR_BG]#{?client_prefix,#[fg=$COLOR_ORANGE]#[bg=$COLOR_BG] #[bold]PREFIX #[nobold],} "

# Status right with system info, date and time
set -g status-right "#[fg=$COLOR_GRAY,bg=$COLOR_BG]#[fg=$COLOR_FG,bg=$COLOR_GRAY] #{battery_percentage} #[fg=$COLOR_PURPLE,bg=$COLOR_GRAY]#[fg=$COLOR_BG,bg=$COLOR_PURPLE] %a %d %b #[fg=$COLOR_BLUE,bg=$COLOR_PURPLE]#[fg=$COLOR_BG,bg=$COLOR_BLUE,bold] %H:%M:%S "

# Window status format with powerline separators and activity indicators
set -g window-status-format "#[fg=$COLOR_BG,bg=$COLOR_GRAY]#[fg=$COLOR_FG,bg=$COLOR_GRAY] #I #[fg=$COLOR_FG,bg=$COLOR_GRAY] #W#{?window_activity_flag,#[fg=$COLOR_YELLOW] ‚óè,} #[fg=$COLOR_GRAY,bg=$COLOR_BG]"
set -g window-status-current-format "#[fg=$COLOR_BG,bg=$COLOR_BLUE]#[fg=$COLOR_BG,bg=$COLOR_BLUE,bold] #I #[fg=$COLOR_BG,bg=$COLOR_BLUE,bold] #W #[fg=$COLOR_BLUE,bg=$COLOR_BG]"
set -g window-status-separator ""
set -g window-status-activity-style "none"

# Pane borders with thicker lines
set -g pane-border-style "fg=$COLOR_GRAY"
set -g pane-active-border-style "fg=$COLOR_BLUE"

# Message text with better contrast
set -g message-style "bg=$COLOR_BLUE,fg=$COLOR_BG,bold"
set -g message-command-style "bg=$COLOR_GRAY,fg=$COLOR_FG,bold"

# Pane number display
set -g display-panes-active-colour "$COLOR_BLUE"
set -g display-panes-colour "$COLOR_GRAY"

# Clock and selection color
set -g clock-mode-colour "$COLOR_BLUE"
set -g mode-style "bg=$COLOR_BLUE,fg=$COLOR_BG,bold"

# Display panes with a longer display time
set -g display-panes-time 2000

# Set window notifications
setw -g monitor-activity on
set -g visual-activity off

# =====================================
# ===           Plugins            ===
# =====================================

# List of plugins
set -g @plugin 'tmux-plugins/tpm'                  # Plugin manager
set -g @plugin 'tmux-plugins/tmux-sensible'        # Sensible defaults
set -g @plugin 'tmux-plugins/tmux-resurrect'       # Save/restore sessions
set -g @plugin 'tmux-plugins/tmux-continuum'       # Auto-save sessions
set -g @plugin 'tmux-plugins/tmux-yank'            # Better clipboard integration
set -g @plugin 'tmux-plugins/tmux-open'            # Open links from tmux
set -g @plugin 'tmux-plugins/tmux-battery'         # Battery status
set -g @plugin 'tmux-plugins/tmux-prefix-highlight' # Highlight when prefix is active
set -g @plugin 'tmux-plugins/tmux-sidebar'         # Directory tree sidebar
set -g @plugin 'tmux-plugins/tmux-copycat'         # Enhanced search
# Removed vim-tmux-navigator plugin
set -g @plugin 'wfxr/tmux-fzf-url'                 # Open URLs with fzf
set -g @plugin 'sainnhe/tmux-fzf'                  # FZF integration
set -g @plugin 'fcsonline/tmux-thumbs'             # Quickly copy text with hints
set -g @plugin 'laktak/extrakto'                   # Extract text from pane
set -g @plugin 'tmux-plugins/tmux-cpu'             # CPU usage
set -g @plugin 'tmux-plugins/tmux-net-speed'       # Network speed
set -g @plugin 'jaclu/tmux-menus'                  # Popup menus
set -g @plugin 'tmux-plugins/tmux-logging'         # Logging and screen capture
set -g @plugin 'schasse/tmux-jump'                 # EasyMotion-like navigation
set -g @plugin 'ofirgall/tmux-window-name'         # Smart window names
set -g @plugin 'tmux-plugins/tmux-sessionist'      # Session management

# =====================================
# ===        Plugin Settings        ===
# =====================================

# Prefix highlight settings
set -g @prefix_highlight_fg "$COLOR_BG"            # Foreground color
set -g @prefix_highlight_bg "$COLOR_ORANGE"        # Background color
set -g @prefix_highlight_show_copy_mode 'on'       # Show when in copy mode
set -g @prefix_highlight_copy_mode_attr "fg=$COLOR_BG,bg=$COLOR_YELLOW,bold" # Copy mode style
set -g @prefix_highlight_output_prefix ''
set -g @prefix_highlight_output_suffix ''

# Resurrect settings
set -g @resurrect-dir '~/.tmux/resurrect'          # Directory for save files
set -g @resurrect-capture-pane-contents 'on'       # Restore pane contents
set -g @resurrect-processes 'ssh psql mysql sqlite3 man less more tail top htop irssi weechat mutt' # Additional processes to restore

# Continuum settings
set -g @continuum-restore 'on'                     # Auto-restore last saved session
set -g @continuum-save-interval '5'                # Save every 5 minutes
set -g @continuum-boot 'on'                        # Start tmux on boot

# Sidebar settings
# Try to use better tree commands if available (exa, tree, ls)
if-shell "command -v exa > /dev/null" \
    'set -g @sidebar-tree-command "exa -T --icons --git-ignore --level=3 --group-directories-first"' \
    'if-shell "command -v tree > /dev/null" \
        "set -g @sidebar-tree-command \"tree -C -L 3\"" \
        "set -g @sidebar-tree-command \"ls -la\""'

set -g @sidebar-tree-width '40'                    # Width of sidebar
set -g @sidebar-tree-position 'left'               # Position of sidebar (left or right)
set -g @sidebar-tree-focus 'none'                  # Don't focus the sidebar

# Alternative sidebar implementation that doesn't rely on the plugin
# This creates a simple directory listing in a new pane
bind-key e if-shell "command -v ranger > /dev/null" \
    "split-window -h -p 25 -c \"#{pane_current_path}\" 'ranger'" \
    "split-window -h -p 25 -c \"#{pane_current_path}\" 'ls -la --color=always | less -R'"

# Alternative sidebar with tree view if available
bind-key E if-shell "command -v tree > /dev/null" \
    "split-window -h -p 25 -c \"#{pane_current_path}\" 'tree -C | less -R'" \
    "split-window -h -p 25 -c \"#{pane_current_path}\" 'ls -la --color=always | less -R'"

# Add a key to toggle a persistent sidebar with ranger
bind-key T if-shell "command -v ranger > /dev/null" \
    "split-window -h -p 30 -c \"#{pane_current_path}\" 'ranger'; select-pane -t:.1" \
    "display-message \"Ranger is not installed. Try: sudo apt install ranger\""

# Thumbs settings
set -g @thumbs-key F                               # Activate with prefix-F
set -g @thumbs-contrast 1                          # Contrast for hints
set -g @thumbs-command 'echo -n {} | pbcopy'       # Copy to clipboard
set -g @thumbs-upcase-command 'open {}'            # Open URL
# Simplified regexp patterns to avoid escaping issues
set -g @thumbs-regexp-1 '[a-z0-9-]+\.[a-z0-9-]+\.[a-z0-9-]+'  # Domains
set -g @thumbs-regexp-2 '[a-f0-9]{7,40}'           # Git commit hashes
set -g @thumbs-regexp-3 '[a-z0-9_-]+/[a-z0-9_-]+'  # GitHub repos

# Extrakto settings
set -g @extrakto_key 'tab'                         # Key to trigger extrakto
set -g @extrakto_split_size '15'                   # Split size
set -g @extrakto_clip_tool 'auto'                  # Auto-detect clipboard tool
set -g @extrakto_fzf_tool 'fzf'                    # Use fzf
set -g @extrakto_grab_area 'window full'           # Grab text from full window

# FZF URL settings
set -g @fzf-url-bind 'u'                           # Trigger with prefix-u
set -g @fzf-url-history-limit '2000'               # URL history limit

# Jump settings
set -g @jump-key 'j'                               # Trigger with prefix-j

# Logging settings
set -g @logging-path "$HOME/tmux-logs"             # Path for logs
set -g @screen-capture-path "$HOME/tmux-captures"   # Path for screen captures

# Menus settings
set -g @menus_trigger 'M'                          # Trigger with prefix-M

# Window name settings
set -g @tmux_window_name_shells "['bash', 'fish', 'sh', 'zsh']" # Default shells
set -g @tmux_window_name_use_tilde 'True'          # Use ~ for home directory

# Sessionist settings
set -g @sessionist-goto 'g'                        # Go to session
set -g @sessionist-new 'C'                         # Create session
set -g @sessionist-kill 'X'                        # Kill session

# =====================================
# ===        Custom Bindings       ===
# =====================================

# Quick menu access (if plugin is installed)
if-shell 'test -f ~/.tmux/plugins/tmux-menus/scripts/menu.sh' \
    'bind-key -n M-m run-shell -b "~/.tmux/plugins/tmux-menus/scripts/menu.sh"'

# Quick session switcher with fzf (if plugin is installed)
if-shell 'test -f ~/.tmux/plugins/tmux-fzf/scripts/session.sh' \
    'bind-key -n M-s run-shell -b "~/.tmux/plugins/tmux-fzf/scripts/session.sh switch"'

# Quick window switcher with fzf (if plugin is installed)
if-shell 'test -f ~/.tmux/plugins/tmux-fzf/scripts/window.sh' \
    'bind-key -n M-w run-shell -b "~/.tmux/plugins/tmux-fzf/scripts/window.sh switch"'

# Quick pane switcher with fzf (if plugin is installed)
if-shell 'test -f ~/.tmux/plugins/tmux-fzf/scripts/pane.sh' \
    'bind-key -n M-p run-shell -b "~/.tmux/plugins/tmux-fzf/scripts/pane.sh switch"'

# Quick command launcher with fzf (if plugin is installed)
if-shell 'test -f ~/.tmux/plugins/tmux-fzf/scripts/command.sh' \
    'bind-key -n M-c run-shell -b "~/.tmux/plugins/tmux-fzf/scripts/command.sh"'

# =====================================
# ===        Custom Commands       ===
# =====================================

# Display system information
bind-key i run-shell "tmux display-message \"CPU: #{cpu_percentage} | RAM: #{ram_percentage} | Battery: #{battery_percentage}\""

# Open file explorer in a new pane
bind-key f if-shell "command -v ranger > /dev/null" \
    "split-window -h -c '#{pane_current_path}' 'ranger'" \
    "if-shell \"command -v mc > /dev/null\" \
        \"split-window -h -c '#{pane_current_path}' 'mc'\" \
        \"split-window -h -c '#{pane_current_path}' 'ls -la | less'\""

# Check if TPM is installed, if not, provide instructions
if-shell 'test ! -d ~/.tmux/plugins/tpm' \
    'display-message "\n\nTMUX Plugin Manager not installed! \n\nPlease install TPM first:\n\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n\nThen press Prefix + I to install plugins.\n\n"; \
     bind-key I display-message "Please install TPM first: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm"'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if-shell 'test -d ~/.tmux/plugins/tpm' 'run "~/.tmux/plugins/tpm/tpm"'
